use zbus::proxy;

use crate::types::{BatteryState, DeviceType, IntSeconds, Percentage, WarningLevel};

/// # D-Bus interface proxy for: `org.freedesktop.UPower.Device`
///
/// This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
/// Source: `Interface '/org/freedesktop/UPower/devices/DisplayDevice' from service 'org.freedesktop.UPower' on system bus`.
///
/// I have stripped out all the methods that are not guaranteed to be available to DisplayDevice. https://upower.freedesktop.org/docs/UPower.html
/// This should also work for custom device paths but idk
#[proxy(
    interface = "org.freedesktop.UPower.Device",
    default_service = "org.freedesktop.UPower",
    default_path = "/org/freedesktop/UPower/devices/DisplayDevice",
    gen_blocking = false
)]
pub trait Device {
    /// Amount of energy (measured in Wh) currently available in the power source.
    #[zbus(property)]
    fn energy(&self) -> zbus::Result<f64>;

    /// Amount of energy (measured in Wh) in the power source when it's considered full.
    #[zbus(property)]
    fn energy_full(&self) -> zbus::Result<f64>;

    /// Discharging/charging rate of the source, measured in Watt.
    #[zbus(property)]
    fn energy_rate(&self) -> zbus::Result<f64>;

    /// A GTK icon name representing the device state.
    #[zbus(property)]
    fn icon_name(&self) -> zbus::Result<String>;

    /// Whether a status icon using this information should be presented.
    #[zbus(property)]
    fn is_present(&self) -> zbus::Result<bool>;

    /// the amount of energy left on the device.
    #[zbus(property)]
    fn percentage(&self) -> zbus::Result<Percentage>;

    /// the power state of the display device, such as Charging or Discharging.
    #[zbus(property)]
    fn state(&self) -> zbus::Result<BatteryState>;

    /// Number of seconds until the power source is considered empty.
    #[zbus(property)]
    fn time_to_empty(&self) -> zbus::Result<IntSeconds>;

    /// Number of seconds until the power source is considered full.
    #[zbus(property)]
    fn time_to_full(&self) -> zbus::Result<IntSeconds>;

    /// the type of the display device, UPS or Battery. Note that this value can change, as opposed to real devices.
    #[zbus(property)]
    fn type_(&self) -> zbus::Result<DeviceType>;

    /// The same as the overall WarningLevel property
    #[zbus(property)]
    fn warning_level(&self) -> zbus::Result<WarningLevel>;
}

//! # D-Bus interface proxy for: `org.freedesktop.UPower`
//!
//! This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
//! Source: `Interface '/org/freedesktop/UPower' from service 'org.freedesktop.UPower' on system bus`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::PropertiesProxy`]
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PeerProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use {crate::types::CriticalAction, zbus::proxy};
#[proxy(
    interface = "org.freedesktop.UPower",
    default_service = "org.freedesktop.UPower",
    default_path = "/org/freedesktop/UPower",
    gen_blocking = false
)]
pub trait UPower {
    /// EnumerateDevices method
    fn enumerate_devices(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// When the system's power supply is critical (critically low batteries or UPS), the system will take this action.
    fn get_critical_action(&self) -> zbus::Result<CriticalAction>;

    /// Get the object to the "display device", a composite device that represents the status icon to show in desktop environments.
    /// You can also access the object directly as its path is guaranteed to be `/org/freedesktop/UPower/devices/DisplayDevice`.
    /// The following standard org.freedesktop.UPower.Device properties will be defined (only `IsPresent` takes a special meaning):
    ///
    ///
    /// - **Type**: the type of the display device, UPS or Battery. Note that this value can change, as opposed to real devices.
    /// - **State**: the power state of the display device, such as Charging or Discharging.
    /// - **Percentage**: the amount of energy left on the device.
    /// - **Energy**: Amount of energy (measured in Wh) currently available in the power source.
    /// - **EnergyFull**: Amount of energy (measured in Wh) in the power source when it's considered full.
    /// - **EnergyRate**: Discharging/charging rate of the source, measured in Watt.
    /// - **TimeToEmpty**: Number of seconds until the power source is considered empty.
    /// - **TimeToFull**: Number of seconds until the power source is considered full.
    /// - **IsPresent**: Whether a status icon using this information should be presented.
    /// - **IconName**: An icon name representing the device state.
    /// - **WarningLevel**: The same as the overall `WarningLevel`
    fn get_display_device(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// DeviceAdded signal
    #[zbus(signal)]
    fn device_added(&self, device: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// DeviceRemoved signal
    #[zbus(signal)]
    fn device_removed(&self, device: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// DaemonVersion property
    #[zbus(property)]
    fn daemon_version(&self) -> zbus::Result<String>;

    /// LidIsClosed property
    #[zbus(property)]
    fn lid_is_closed(&self) -> zbus::Result<bool>;

    /// LidIsPresent property
    #[zbus(property)]
    fn lid_is_present(&self) -> zbus::Result<bool>;

    /// OnBattery property
    #[zbus(property)]
    fn on_battery(&self) -> zbus::Result<bool>;
}
